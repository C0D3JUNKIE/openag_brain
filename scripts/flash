#!/usr/bin/env python
import subprocess
import argparse
import tempfile

from openag_brain.utils import resolve_fixtures

def run_flash(build_dir):
    init_proc = subprocess.Popen(
        ["openag", "firmware", "init"], cwd=build_dir
    )
    init_proc.wait()
    flash_proc = subprocess.Popen(
        [
            "openag", "firmware", "run", "-p", "ros", "-t",
            "upload"
        ], cwd=build_dir
    )
    flash_proc.wait()
    print "Done"

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="""
Flashes Arduino with firmware_modules read from the CouchDB firmware_modules
database.
        """,
    )
    parser.add_argument(
        "-d", "--build_dir",
        help="The directory in which to initialize the PlatformIO project",
        default=None
    )
    parser.add_argument(
        '-f', '--fixture', help="Name of the fixture to apply to the database",
        default=[], action='append', dest='fixtures'
    )
    parser.add_argument(
        '-F', '--fixture_path',
        help="""
Path to a json fixture file to apply to the database. Specify the full path to
the fixture file. This flag is useful for loading fixtures not located in the
default fixtures directory.
        """,
        default=[], action='append', dest='fixture_paths'
    )

    args = parser.parse_args()
    build_dir = args.build_dir or tempfile.mkdtemp()
    # Resolve named fixtures, then join named fixtures and path fixtures.
    fixture_paths = resolve_fixtures(args.fixtures) + args.fixture_paths
    # Load the fixtures (if any)
    for fixture_path in fixture_paths:
        print "Applying fixture {}".format(fixture_path)
        if subprocess.call(
            ["openag", "db", "load_fixture", fixture_path]
        ):
            raise RuntimeError("Failed to load fixture " + fixture_path)
    # Flash the Arduino
    run_flash(build_dir)
