#!/usr/bin/env python
import time
import atexit
import argparse
import requests
import subprocess

from couchdb import Server

from openag_brain import commands, args
from openag_brain.db_names import DbName
from openag_brain.util import get_database_changes

modules = None

@atexit.register
def kill_children():
    if modules is not None:
        modules.terminate()
        modules.wait()

def spawn_modules(development=False, screen=False):
    roslaunch_command = [
        "roslaunch", "openag_brain", "modules.launch",
        "development:={}".format(development)
    ]
    if screen:
        roslaunch_command.append("--screen")
    return subprocess.Popen(roslaunch_command)

def main(db_server, hostname, fixtures=[], development=False, screen=False):
    # Initialize the database
    print "Initializing the database"
    server = Server(db_server)
    commands.init_db(server, hostname)

    # Load the fixture
    for fixture in fixtures:
        print "Applying fixture {}".format(fixture)
        commands.load_fixture(server, fixture)

    # Start the software modules
    if not development:
        print "Generating launch file"
        commands.update_launch(server)
    global modules
    print "Spawning software modules"
    modules = spawn_modules(development, screen)

    if development:
        while True:
            time.sleep(60)

    # Whenever the softwate module configuration changes, restart the software
    # modules
    last_seq = get_database_changes(
        db_server, DbName.SOFTWARE_MODULE
    )['last_seq']
    while True:
        time.sleep(5)
        changes = get_database_changes(
            db_server, DbName.SOFTWARE_MODULE, last_seq
        )
        last_seq = changes['last_seq']
        if len(changes['results']):
            print "Software module configuration changed; Restarting"
            modules.terminate()
            print "Generating launch file"
            commands.update_launch(server)
            modules.wait()
            print "Spawning software modules"
            modules = spawn_modules(screen)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="""
Runs the entire software project. In particular, it initializes the
database (init_db), optionally applies a fixture to the database
(load_fixture), generates a roslaunch file for the software modules
(update_launch), runs the roslaunch file, and respawns if there is a change to
the configuration of the software modules
        """,
    )
    args.add_db_server_arg(parser)
    args.add_hostname_arg(parser)
    parser.add_argument(
        '-f', '--fixture', help="Name of the fixture to apply to the database",
        default=[], action='append'
    )
    parser.add_argument(
        "-d", "--development", action="store_true",
        help="Disables automatic module updates for both software and firmware"
    )
    parser.add_argument(
        "--screen", action="store_true",
        help="""
Passes the --screen flag to the roslaunch call, which forces all node output to
the screen. Useful for debugging
""")
    vals = parser.parse_args()
    main(
        vals.db_server, vals.hostname, vals.fixture, vals.development,
        vals.screen
    )
