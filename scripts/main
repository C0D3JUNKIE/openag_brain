#!/usr/bin/env python
import os
import time
import atexit
import argparse
import subprocess
import multiprocessing as mp

from openag.cli.config import config as cli_config
from openag.db_names import (
    SOFTWARE_MODULE, FIRMWARE_MODULE, ENVIRONMENTAL_DATA_POINT
)

from openag_brain import commands
from openag_brain.srv import SetCategories
from openag_brain.utils import resolve_fixtures

modules = None

@atexit.register
def kill_children():
    if modules is not None:
        modules.terminate()
        modules.wait()

def spawn_modules(launch_file, screen=False):
    roslaunch_command = ["roslaunch", "openag_brain", launch_file]
    if screen:
        roslaunch_command.append("--screen")
    return subprocess.Popen(roslaunch_command)

def run_categories_process(queue):
    """
    Start a ROS service that allows the user to changes the set of categories
    enabled in this run of the system. Whenever the service is called, it adds
    the new list of categories to the given queue.

    It is convenient to run this service in a new process on every restart
    because `rospy` assumes that a python process will never outlive its ROS
    core and that it will certainly never have to register itself with a series
    of different ROS cores over time, as we would like to do here.
    """
    def run_process():
        import rospy
        rospy.init_node("categories_service")
        def callback(req):
            queue.put(req.categories)
            return SetCategories._response_class(True, "OK")
        rospy.Service(
            "set_categories", SetCategories, callback
        )
        rospy.spin()
    p = mp.Process(target=run_process)
    p.start()
    return p

def main(api_server, db_server, launch_file, screen, categories):
    # Initialize the database
    print "Initializing the database"
    db_server = db_server or cli_config["local_server"]["url"]
    command = ["openag", "db", "init"]
    if db_server:
        command.extend(["--db_url", db_server])
    db_server = db_server or "http://localhost:5984"
    api_server = api_server or "http://localhost:5000"
    command.extend(["--api_url", api_server])
    if subprocess.call(command):
        raise RuntimeError("Failed to initialize database")

    global modules
    print "Spawning software modules"
    modules = spawn_modules(launch_file, screen)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="""
Runs the entire software project. In particular, it initializes the
database (init_db), optionally applies a fixture to the database
(load_fixture), generates a roslaunch file for the software modules
(update_launch), runs the roslaunch file, and respawns if there is a change to
the configuration of the software modules
        """,
    )
    parser.add_argument(
        'launch_file'
        help="The path to the .launch file to use"
    )
    parser.add_argument(
        "-A", "--api_server", help="Address of the API from the api module"
    )
    parser.add_argument(
        "-D", "--db_server", help="Address of the database server"
    )
    parser.add_argument(
        "--screen", action="store_true",
        help="""
Passes the --screen flag to the roslaunch call, which forces all node output to
the screen. Useful for debugging.
""")
    vals = parser.parse_args()
    main(
        api_server=vals.api_server, db_server=vals.db_server,
        fixtures=fixture_paths, screen=vals.screen, categories=vals.categories
    )
